{"version":3,"sources":["components/PageTemplate/PageTemplate.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","PageTemplate","_ref","children","react_default","a","createElement","className","TodoInput","value","onChange","onInsert","onKeyPress","e","key","onClick","TodoItem","nextProps","nextState","this","props","done","_this$props","onToggle","onRemove","type","checked","readOnly","stopPropagation","Component","TodoList","todos","todoList","map","todo","components_TodoItem_TodoItem","id","text","App","state","input","getId","_this","handleChange","target","setState","handleInsert","_this$state","newTodo","Object","toConsumableArray","concat","handleToggle","index","findIndex","toggled","objectSpread","slice","length","handleRemove","_this$state2","components_PageTemplate_PageTemplate","components_TodoInput_TodoInput","components_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfce21d5.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './PageTemplate.scss';\nimport classNames from 'classnames/bind';\n\nconst cx = classNames.bind(styles);\n\n/* 페이지 템플릿을 위한 컴포넌트입니다. 페이지의 틀, \n  그리고 타이틀 / 콘텐츠 등의 속성이 설정되어 있습니다. */\n\nconst PageTemplate = ({children}) => {\n  return (\n    <div className={cx('page-template')}>\n      <h1>일정 관리</h1>\n      <div className={cx('content')}>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default PageTemplate;\n","import React from 'react';\nimport styles from './TodoInput.scss';\nimport classNames from 'classnames/bind';\n\nconst cx = classNames.bind(styles);\n\n// 인풋과 버튼이 함께 있는 컴포넌트입니다. \n/*\n  value: 인풋 값\n  onChange: 인풋 변경 이벤트\n  onInsert: 추가버튼 클릭 이벤트\n*/\nconst TodoInput = ({value, onChange, onInsert}) => {\n  \n  // 엔터키가 눌리면 onInsert 를 실행합니다.\n  const handleKeyPress = (e) => {\n    if(e.key === 'Enter') {\n      onInsert();\n    }\n  }\n\n  return (\n    <div className={cx('todo-input')}>\n      <input onChange={onChange} value={value} onKeyPress={handleKeyPress}/>\n      <div className={cx('add-button')} onClick={onInsert}>추가</div>\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import React, { Component } from 'react';\nimport styles from './TodoItem.scss';\nimport classNames from 'classnames/bind';\n\nconst cx = classNames.bind(styles);\n\nclass TodoItem extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.done !== nextProps.done;\n  }\n  \n  render() {\n    const {done, children, onToggle, onRemove} = this.props;\n    /* 위 코드에선 비구조화 할당을 통하여 this.props 안에 있는\n       done, children, onToggle, onRemove 에 대한 레퍼런스를 만들어주었습니다. */\n    return (\n      <div className={cx('todo-item')} onClick={onToggle}>\n        <input className={cx('tick')} type=\"checkbox\" checked={done} readOnly/>\n        <div className={cx('text', { done })}>{children}</div>\n        <div className={cx('delete')} onClick={(e) => {\n          onRemove();\n          e.stopPropagation();\n          }\n        }>[지우기]</div>\n      </div>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport TodoItem from '../TodoItem';\n\nclass TodoList extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.todos !== nextProps.todos;\n  } \n  \n  render() {\n    const { todos, onToggle, onRemove } = this.props;\n    const todoList = todos.map(\n      todo => (\n        <TodoItem\n          key={todo.id}\n          done={todo.done}\n          onToggle={() => onToggle(todo.id)}\n          onRemove={() => onRemove(todo.id)}>\n          {todo.text}\n        </TodoItem>\n      )\n    );\n\n    return (\n      <div>\n        {todoList}\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport PageTemplate from './PageTemplate';\nimport TodoInput from './TodoInput';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  state = {\n    input: '', // 인풋의 값\n    // 일정 데이터 초기값\n    todos: [\n      { id:0, text: '리액트 공부하기', done: true },\n      { id:1, text: '컴포넌트 스타일링 해보기', done: false }\n    ]\n  }\n\n  // 일정 데이터 안에 들어가는 id 값\n  id = 1\n  getId = () => {\n    return ++this.id; // 현재 값에서 1을 더한 값을 반환\n  }\n\n  handleChange = (e) => {\n    const { value } = e.target;\n    this.setState({\n      input: value\n    });\n  }\n\n  // 새 데이터 추가\n  handleInsert = () => {\n    const { todos, input } = this.state;\n\n    // 새 데이터 객체 생성\n    const newTodo = {\n      text: input,\n      done: false,\n      id: this.getId()\n    };\n    \n    // 배열 안에 새 데이터를 집어넣습니다.\n    this.setState({\n      todos: [...todos, newTodo],\n      input: ''\n    });\n  }\n\n  // 투두아이템 토글하기\n  handleToggle = (id) => {\n    // id 로 배열의 인덱스를 찾습니다.\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n    \n    // 찾은 데이터의 done 값을 반전시킵니다.\n    const toggled = {\n      ...todos[index],\n      done: !todos[index].done\n    };\n\n    // slice 를 통하여 우리가 찾은 index 전 후의 데이터들을 복사합니다\n    // 그리고 그 사이에는 변경된 투두 객체를 넣어줍니다.\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        toggled,\n        ...todos.slice(index + 1, todos.length)\n      ]\n    });\n  }\n\n  handleRemove = (id) => {\n    const { todos } = this.state;\n    const index = todos.findIndex(todo => todo.id === id);\n\n    // slice 로 전 후 데이터들을 복사하고, 우리가 찾은 index 는 제외시킵니다.\n    this.setState({\n      todos: [\n        ...todos.slice(0, index),\n        ...todos.slice(index + 1, todos.length)\n      ]\n    });\n  }\n\n  render() {\n    const { input, todos } = this.state;\n    const { \n      handleChange,\n      handleInsert,\n      handleToggle,\n      handleRemove\n    } = this;\n\n    return (\n      <PageTemplate>\n        <TodoInput onChange={handleChange} onInsert={handleInsert} value={input}/>\n        <TodoList todos={todos} onToggle={handleToggle} onRemove={handleRemove}/>\n      </PageTemplate>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}